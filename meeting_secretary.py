import json
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from pathlib import Path

from config import MeetingSecretaryConfig, VoskConfig, OpenAIConfig, WeeekConfig
from vosk_transcriber import VoskTranscriber
from openai_analyzer import OpenAIAnalyzer, MeetingAnalysis
from weeek_integration import WeeekIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TechnicalMeetingSecretary:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—â–∞–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Weeek"""

    def __init__(self, config: MeetingSecretaryConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—è

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞—Ä—è
        """
        self.config = config

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è...")

        # Vosk —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä
        self.transcriber = VoskTranscriber(config.vosk)

        # OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        self.analyzer = OpenAIAnalyzer(config.openai)

        # Weeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.weeek_integration = None
        if config.weeek:
            try:
                self.weeek_integration = WeeekIntegration(config.weeek)
                logger.info("Weeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Weeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: {e}")
        else:
            logger.info("Weeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def process_meeting_audio(self,
                              audio_path: str,
                              project_id: Optional[str] = None,
                              save_json: bool = True,
                              output_dir: str = "results") -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Å–æ–≤–µ—â–∞–Ω–∏—è

        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            project_id: ID –ø—Ä–æ–µ–∫—Ç–∞ Weeek (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            save_json: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –°–û–í–ï–©–ê–ù–ò–Ø ===")
        start_time = datetime.now()

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        Path(output_dir).mkdir(exist_ok=True)

        try:
            # 1. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ
            logger.info("–≠—Ç–∞–ø 1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ")
            transcript = self.transcriber.transcribe_from_file(audio_path)

            if not transcript.strip():
                raise ValueError("–ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")

            # 2. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            logger.info("–≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            analysis = self.analyzer.analyze_transcript(transcript)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
            if not self.analyzer.validate_analysis(analysis):
                logger.warning("–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")

            # 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Weeek
            weeek_result = None
            if self.weeek_integration and analysis.tasks:
                logger.info("–≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ Weeek")
                try:
                    weeek_result = self.weeek_integration.create_tasks_from_analysis(
                        analysis, project_id
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Weeek: {e}")
                    weeek_result = {"status": "error", "message": str(e)}
            else:
                logger.info("–≠—Ç–∞–ø 3: –ü—Ä–æ–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Weeek")
                weeek_result = {"status": "skipped", "reason": "no_tasks_or_disabled"}

            # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            processing_time = (datetime.now() - start_time).total_seconds()

            result = {
                "processing_info": {
                    "audio_file": audio_path,
                    "processing_timestamp": start_time.isoformat(),
                    "processing_time_seconds": processing_time,
                    "transcript_length": len(transcript),
                    "status": "success"
                },
                "analysis": {
                    "summary": analysis.summary,
                    "tasks": analysis.tasks,
                    "hypotheses": analysis.hypotheses,
                    "decisions": analysis.decisions,
                    "participants": analysis.participants,
                    "technical_areas": analysis.technical_areas
                },
                "weeek_integration": weeek_result,
                "full_transcript": transcript,
                "statistics": {
                    "tasks_count": len(analysis.tasks),
                    "hypotheses_count": len(analysis.hypotheses),
                    "decisions_count": len(analysis.decisions),
                    "participants_count": len(analysis.participants),
                    "technical_areas_count": len(analysis.technical_areas)
                }
            }

            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if save_json:
                output_file = self._save_result(result, output_dir)
                result["processing_info"]["output_file"] = output_file

            logger.info(f"=== –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û –ó–ê {processing_time:.2f} –°–ï–ö–£–ù–î ===")
            return result

        except Exception as e:
            processing_time = (datetime.now() - start_time).total_seconds()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

            error_result = {
                "processing_info": {
                    "audio_file": audio_path,
                    "processing_timestamp": start_time.isoformat(),
                    "processing_time_seconds": processing_time,
                    "status": "error",
                    "error_message": str(e)
                },
                "analysis": None,
                "weeek_integration": None,
                "full_transcript": None
            }

            if save_json:
                error_file = self._save_result(error_result, output_dir, is_error=True)
                error_result["processing_info"]["error_file"] = error_file

            return error_result

    def _save_result(self, result: Dict[str, Any], output_dir: str, is_error: bool = False) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ JSON —Ñ–∞–π–ª

        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            is_error: –§–ª–∞–≥ –æ—à–∏–±–∫–∏

        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        prefix = "error" if is_error else "meeting_analysis"
        filename = f"{prefix}_{timestamp}.json"
        filepath = Path(output_dir) / filename

        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)

            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return str(filepath)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return ""

    def print_analysis_summary(self, result: Dict[str, Any]):
        """
        –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞

        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        if result.get("processing_info", {}).get("status") != "success":
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_info', {}).get('error_message')}")
            return

        analysis = result.get("analysis", {})
        stats = result.get("statistics", {})
        weeek = result.get("weeek_integration", {})

        print("\n" + "=" * 60)
        print("üìã –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –°–û–í–ï–©–ê–ù–ò–Ø")
        print("=" * 60)

        print(f"\nüìù –†–µ–∑—é–º–µ:")
        print(f"   {analysis.get('summary', '–ù–µ —Å–æ–∑–¥–∞–Ω–æ')}")

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –ó–∞–¥–∞—á –≤—ã—è–≤–ª–µ–Ω–æ: {stats.get('tasks_count', 0)}")
        print(f"   ‚Ä¢ –†–µ—à–µ–Ω–∏–π –ø—Ä–∏–Ω—è—Ç–æ: {stats.get('decisions_count', 0)}")
        print(f"   ‚Ä¢ –ì–∏–ø–æ—Ç–µ–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats.get('hypotheses_count', 0)}")
        print(f"   ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('participants_count', 0)}")

        if analysis.get('tasks'):
            print(f"\n‚úÖ –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for i, task in enumerate(analysis['tasks'], 1):
                print(f"   {i}. {task.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"      ‚û§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.get('–∫—Ç–æ_–≤—ã–ø–æ–ª–Ω—è–µ—Ç', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}")
                print(f"      ‚û§ –°—Ä–æ–∫: {task.get('—Å—Ä–æ–∫', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

        if weeek.get("status") == "success":
            print(f"\nüéØ Weeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:")
            project = weeek.get('project', {})
            print(f"   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {project.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   ‚Ä¢ –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {weeek.get('stats', {}).get('created_tasks', 0)}")

            if self.weeek_integration and project.get('id'):
                project_url = self.weeek_integration.get_project_url(project['id'])
                print(f"   ‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {project_url}")

            # –ü–æ–∫–∞–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            created_tasks = weeek.get('tasks', [])
            if created_tasks:
                print(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                for task in created_tasks:
                    if task.get('type') == 'task':
                        print(f"     - {task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        elif weeek.get("status") == "error":
            print(f"\n‚ùå –û—à–∏–±–∫–∞ Weeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {weeek.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"\n‚ö†Ô∏è  Weeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")

        processing_time = result.get("processing_info", {}).get("processing_time_seconds", 0)
        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print("=" * 60)

    def get_weeek_workspaces(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ Weeek

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        """
        if not self.weeek_integration:
            logger.warning("Weeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return []

        return self.weeek_integration.get_workspaces()

    def get_weeek_projects(self, workspace_id: str = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ Weeek

        Args:
            workspace_id: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        """
        if not self.weeek_integration:
            logger.warning("Weeek –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return []

        return self.weeek_integration.get_projects(workspace_id)


def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è —Å Weeek"""

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = MeetingSecretaryConfig(
        vosk=VoskConfig(
            model_path="path/to/vosk-model-ru-0.42"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å
        ),
        openai=OpenAIConfig(
            api_key="your-openai-api-key"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
        ),
        weeek=WeeekConfig(  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            api_token="your-weeek-api-token",
            workspace_id="your-workspace-id",
            project_id="your-project-id"  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        )
    )

    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    # config = MeetingSecretaryConfig.from_env()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è
    secretary = TechnicalMeetingSecretary(config)

    # –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    if secretary.weeek_integration:
        print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ Weeek:")
        projects = secretary.get_weeek_projects()
        for project in projects[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   ‚Ä¢ {project.get('name')} (ID: {project.get('id')})")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤–µ—â–∞–Ω–∏—è
    audio_file = "meeting_recording.wav"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ñ–∞–π–ª

    try:
        result = secretary.process_meeting_audio(
            audio_path=audio_file,
            project_id=None,  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
            save_json=True,
            output_dir="meeting_results"
        )

        # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
        secretary.print_analysis_summary(result)

        return result

    except FileNotFoundError:
        logger.error(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    result = main()
